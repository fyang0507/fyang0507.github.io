---
description: Using git
globs: 
alwaysApply: false
---
# Git Workflow Best Practices

## Always Pull Before Making Changes

Before performing any Git operations (add, commit, or push), **ALWAYS** pull from the remote repository first to get the latest changes and avoid conflicts.

## Why This Is Critical for This Project

This project uses GitHub Actions ([.github/workflows/build-docs.yml](mdc:.github/workflows/build-docs.yml)) that automatically:
- Builds the site when you push to `main`
- Auto-commits the generated `docs/` folder
- Pushes these changes back to the repository

**This means the remote repository will have new commits that you don't have locally after every push!** If you don't pull before your next commit, you'll encounter merge conflicts or push rejections.

## Recommended Git Workflow

1. **Pull first**: `git pull origin main` (or your default branch)
2. **Make your changes**: Edit files as needed
3. **Stage changes**: `git add .` or `git add <specific-files>`
4. **Commit changes**: `git commit -m "descriptive commit message"`
5. **Pull again** (if time has passed): `git pull origin main`
6. **Push changes**: `git push origin main`

## Why This Matters

- **GitHub Actions auto-commits**: The build workflow automatically commits the `docs/` folder after every push
- Prevents merge conflicts by ensuring you have the latest code
- Avoids overwriting other contributors' work
- Maintains a clean Git history
- Reduces the need for complex merge resolutions

## Commands to Remember

```bash
# Always start with this (especially important due to auto-commits)
git pull origin main

# After making changes
git add .
git commit -m "Your commit message"

# Pull again if unsure about remote changes (recommended before push)
git pull origin main

# Finally push
git push origin main
```

## Important Notes

- Replace `main` with your default branch name if different (e.g., `master`, `develop`)
- If you encounter conflicts during pull, resolve them before proceeding
- Consider using `git status` frequently to check your repository state
- Use descriptive commit messages that explain what changes were made
- **Never manually edit the `docs/` folder** - it's auto-generated by the build process
